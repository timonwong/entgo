// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/main.tmpl
// schema.go
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x51\x5f\x6b\xdb\x3e\x14\x7d\xb6\x3e\xc5\xf9\x99\xfe\xa8\xdd\xa5\x4a\xdb\xb7\x0d\xf2\x50\xda\x0c\x32\xb6\x76\x90\xc2\x1e\xba\x52\x14\xfb\x3a\x11\x75\x24\xef\x4a\x29\x0b\x42\xdf\x7d\x48\x4e\xc2\xf6\x64\x4b\xe7\xdc\xf3\x47\x37\x84\xe9\x85\xb8\xb3\xc3\x9e\xf5\x7a\xe3\x71\x73\x75\xfd\xf1\x72\x60\x72\x64\x3c\x3e\xab\x86\x56\xd6\xbe\x61\x61\x1a\x89\xdb\xbe\x47\x26\x39\x24\x9c\xdf\xa9\x95\xe2\x69\xa3\x1d\x9c\xdd\x71\x43\x68\x6c\x4b\xd0\x0e\xbd\x6e\xc8\x38\x6a\xb1\x33\x2d\x31\xfc\x86\x70\x3b\xa8\x66\x43\xb8\x91\x57\x47\x14\x9d\xdd\x99\x56\x68\x93\xf1\xaf\x8b\xbb\xf9\xc3\x72\x8e\x4e\xf7\x84\xc3\x1d\x5b\xeb\xd1\x6a\xa6\xc6\x5b\xde\xc3\x76\xf0\x7f\x99\x79\x26\x92\xe2\x62\x1a\xa3\x10\x21\xa0\xa5\x4e\x1b\x42\xb9\x55\xda\x94\x88\x51\x4c\xa7\xb8\x4b\x79\xd6\x64\x88\x95\xa7\x16\xab\x3d\xce\xc9\xf8\xe6\x74\x75\x2e\x71\xff\x88\x87\xc7\x27\xcc\xef\x17\x4f\x52\x0c\xaa\x79\x53\x6b\x42\xd2\x10\x42\x6f\x07\xcb\x1e\x95\x28\x4a\xeb\x4a\x51\x94\xab\xbd\xa7\xf4\x13\x02\x3c\x6d\x87\x5e\x79\x42\x39\xb2\x5c\xb6\xcc\xd0\xc0\xda\xf8\x0e\xe5\xff\xbf\x4a\xc8\xef\x07\xc5\x18\x45\x9d\x63\x9e\xad\x94\x23\x7c\x9a\x21\x7f\x8f\x78\x9a\x7d\x57\x0c\xd7\x6c\x68\xab\x1c\x66\x78\x7e\x21\xe3\xe5\xc2\x78\xe2\x4e\x35\x14\xb2\x34\x2b\xb3\x26\x9c\xbd\x4e\x70\x66\xd4\x36\xcb\xc8\x07\xb5\x25\x97\xf4\x8b\x22\x84\xcb\x83\x7e\x8c\x32\x1d\x4e\x51\x5c\x88\xe5\x61\x26\xc6\x49\xd6\x22\xd3\xe2\x32\x46\x11\x85\xe8\x76\xa6\xc9\x9d\xab\x1a\x41\x14\x29\x48\xaf\x0d\x39\x3c\xbf\x3c\xbf\xa4\xd2\xa2\xe8\x2c\xe3\x75\x72\xc8\x97\x7c\xc7\x28\xc7\xbc\x41\x14\xc5\x6a\x02\x62\x4e\xd8\x37\xc5\x6e\xa3\xfa\x65\x06\xab\x91\x53\x8b\xa2\xd0\x5d\x66\xfc\x37\x83\xd1\x7d\x9e\x29\x3a\xa5\xfb\x8a\x98\x13\x9c\x2a\x8c\xbe\x33\xa8\x61\x20\xd3\x56\xf9\x38\xc1\xaa\x16\x09\xb5\x4e\x2e\x7d\x6b\x77\x5e\xfe\x60\xed\xa9\xca\xfb\x90\x5f\xac\x36\x47\xe2\x18\xb7\x2a\x7f\x9a\xb2\xae\xeb\x53\xb7\xa3\x4b\xb2\xb7\x9c\x4b\x8e\x5a\xc4\x3c\x6a\x2d\x3d\x6b\xb3\x4e\x1c\x39\x4f\x9c\xaa\xfe\x90\x45\x32\x71\xfe\x5b\xfb\xea\x3a\xcb\xfd\xb3\xfa\xb1\xd9\xb8\xf9\xc3\x8b\xc6\x28\xfe\x04\x00\x00\xff\xff\x95\x06\x0f\xa4\x50\x03\x00\x00")

func templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMainTmpl,
		"template/main.tmpl",
	)
}

func templateMainTmpl() (*asset, error) {
	bytes, err := templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/main.tmpl", size: 848, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x5a\x6d\x6f\xdc\x36\x12\xfe\xbc\xfb\x2b\x26\x06\x6a\x48\xc1\x56\xee\x15\x45\x71\xb7\xb9\x3d\xa0\x68\x53\xd4\xd7\xab\x1b\x34\x49\xbf\x04\x81\x2b\x4b\xc3\x5d\xc6\x12\xb9\x25\xb9\x8e\x5d\xd7\xff\xfd\xc0\xe1\x8b\x28\xad\xf6\x25\x2f\xf6\x97\x48\xc3\xe1\x70\xe6\xd1\xcc\xf0\x21\x37\x67\x67\xf0\xbd\x5c\xdf\x29\xbe\x5c\x19\xf8\xfa\xab\x7f\xfc\xeb\xcb\xb5\x42\x8d\xc2\xc0\x8f\x65\x85\x57\x52\x5e\xc3\xb9\xa8\x0a\xf8\xae\x69\x80\x94\x34\xd8\x71\x75\x83\x75\x31\x3d\x3b\x83\x57\x2b\xae\x41\xcb\x8d\xaa\x10\x2a\x59\x23\x70\x0d\x0d\xaf\x50\x68\xac\x61\x23\x6a\x54\x60\x56\x08\xdf\xad\xcb\x6a\x85\xf0\x75\xf1\x55\x18\x05\x26\x37\xa2\xb6\x26\xb8\x20\x95\xff\x9d\x7f\xff\xfc\xe2\xe5\x73\x60\xbc\xc1\x20\x53\x52\x1a\xa8\xb9\xc2\xca\x48\x75\x07\x92\x81\x49\xd6\x33\x0a\xb1\x98\x4e\xd7\x65\x75\x5d\x2e\x11\x1a\x59\xd6\xd3\x29\x6f\xd7\x52\x19\xc8\xa6\x93\x13\x14\x95\xac\xb9\x58\x9e\xbd\xd3\x52\x9c\x4c\x27\x27\xac\x35\xf6\x1f\x85\xac\xc1\xca\x9c\x4c\xa7\x93\x93\x25\x37\xab\xcd\x55\x51\xc9\xf6\x8c\xf9\x80\xcf\x50\x90\xda\x8e\xa1\x33\x5d\xad\xb0\x2d\xcf\xb0\x5e\xe2\x11\x6a\x8c\x63\x53\x1f\xa1\xc7\x45\x8d\xb7\x27\xd3\x7c\x6a\x21\x79\x49\x32\x50\xe8\x3f\x86\x86\x52\x00\x0a\x53\xf8\x01\xb3\x2a\x0d\xbc\x2f\x35\xc5\x8c\x35\x30\x25\x5b\x28\xa1\x92\xed\xba\xe1\x16\x78\x8d\x0a\x3c\x2e\xc5\xd4\xdc\xad\x31\x98\xd4\x46\x6d\x2a\x03\xf7\xd3\xc9\x45\xd9\x22\x00\x58\x09\x17\x4b\xa0\xbf\x3f\x2c\x52\xf3\x13\x51\xb6\x38\x93\x2d\x37\xd8\xae\xcd\xdd\xc9\x1f\xd3\xc9\xf7\x52\x30\xbe\x04\xf2\x21\x3c\x7b\xe5\x8a\x5e\xfb\xea\xcf\xeb\x25\x6a\x00\x78\xf3\xf6\xa9\x7d\x4c\x6d\x5b\xd8\x74\x5f\xfb\x47\x0b\x91\x26\x6d\x7a\x4c\xb4\x09\xbd\x81\xfa\xb9\x45\x0a\xb5\x55\xa7\xc7\x44\x9d\xbb\xa1\xbe\xfe\x4f\x52\x5e\x7b\x67\x5e\x48\xcd\x0d\x97\x22\xe8\xaf\xec\x50\x5f\xfb\x85\x6c\x78\x75\x07\x70\x25\x65\x03\xd0\x83\x65\x4d\x43\x3d\xf5\x07\xfa\x5c\xd1\x6c\x8d\xba\x52\xfc\x0a\x35\x94\x40\xae\xc3\x3a\x0c\xf9\x8c\x76\x5f\xdb\x7f\x93\x38\xaf\xfb\x2a\x31\x22\x00\x2e\x0c\xc0\xd9\x19\x38\x4c\x28\xb4\x60\xc5\xd9\x6e\xb8\x36\xc5\x74\xf2\x0b\xbf\xc5\xfa\x5c\xd8\x29\xe4\xf4\xd9\x19\x9c\x8b\x9a\x57\xa5\x41\x0d\x9c\x25\x13\x6c\xc6\xb4\x56\xfb\x4b\x2e\xdc\x44\x2e\xce\xbd\x5d\xb7\x16\x89\xfa\x6b\xb5\x24\x72\x6b\xb9\x70\x9d\x43\xdb\xc9\xe9\xe4\x1f\x91\x9b\x6e\xe2\x76\x6a\xba\xbf\x34\x41\xd3\xbf\x9d\xc9\x7a\x2e\x98\xec\xd4\x9e\x52\xec\xc5\xab\xbb\x35\xf6\x06\xfc\x74\xeb\x40\x7f\xfa\xab\x32\x5d\xec\xc0\xea\xa6\x1c\xa4\xfe\x4b\xfe\x57\xe2\xfb\x53\x2e\xcc\xb7\xdf\xec\x9c\xad\xf9\x5f\x83\xc5\x9f\x8b\x4d\xab\xa3\xda\x9b\xb7\x0e\x94\x7b\xb8\x98\xc1\xef\xc1\x97\x87\x58\x4b\x56\xb9\x3f\xff\xb5\xe0\x7f\x6e\xa2\x03\x69\x12\x8f\x2c\xbf\x21\xe5\xbe\x81\x0b\xde\x34\xe5\x55\x83\x47\x19\x10\x5e\xb9\x6f\xe2\xd7\xb5\x4d\xea\xb2\x39\xca\x84\xf4\xca\x7d\x13\x3f\x20\x2b\x37\x8d\x39\x2e\x8c\xda\x29\x8f\x5a\xf8\xbd\x6c\x2c\x1c\x5c\x18\x54\xb6\xed\xde\x3f\xec\xb1\x70\x79\x63\xb5\x07\x80\xae\xeb\xd2\x60\xf0\xe7\x10\xa0\xa4\x7c\x39\xea\xd0\x79\xdb\x6e\x4c\x44\xf6\x80\x21\x1e\x94\xfb\x36\x7e\x2f\x1b\x5e\x97\x46\x2a\x4a\x11\x2a\xda\xdd\x36\x6e\xa2\xf2\x20\x43\x8d\x54\xe5\x12\x7f\xc6\x3b\x38\x9c\xdf\xda\x29\x5f\x5e\xe3\xdd\xb0\x4f\xfa\xde\x45\x7f\x4f\xfb\xaf\x43\x2b\xa1\x0b\x0e\x1c\x41\x61\xc5\x37\x47\x21\xa2\x83\xf2\xc0\x06\xf5\x53\x5b\xdc\x56\xb7\x2d\xd7\x6f\x5c\x40\x6f\x7b\x71\x05\x1b\xa4\x7c\xb9\x5d\xf2\xdf\x09\x21\x4d\x69\x3d\xd4\x7d\x2b\xbd\xbc\xf1\x56\xca\x4e\x79\xb8\x49\xb6\x2d\xc6\x6f\x72\x00\xd8\xca\x29\xc7\x3d\x84\xf6\xc9\xed\x9e\x4a\xe2\x8f\x68\xa9\x34\x6f\xbc\xa3\xee\x70\x6c\x67\x3b\x0d\xe0\x1e\x9e\xbb\xbf\x97\x1e\x98\x3b\x6c\xa4\xbf\x21\x8b\x5e\xef\x9f\xaa\x90\x5d\x6e\xbb\xfd\x1b\xb2\xa8\xd8\xb1\x90\x1d\xf3\x77\x37\xd1\x1d\x69\xb9\xa7\x83\x9e\x8b\x1b\x54\x7a\x6f\x52\x47\xba\x42\x9a\x43\xbf\xff\xdc\x70\x85\xf5\xe1\xe9\xca\x6b\xee\x2e\xef\xa7\x96\x6d\x15\xfd\x82\x3f\xa2\xb6\xd3\x72\xd8\x51\x0c\x07\x6a\xc1\xe5\xb4\xe3\x16\xdb\x49\xed\xe4\x1f\x91\xd5\x6e\x62\x97\xd6\xc9\x87\x8a\x50\xed\xf9\x32\x81\x96\x86\x9d\xd5\xe6\xd4\x61\x5a\x3a\xa2\x3d\x46\x4b\x13\x94\x63\xba\x1e\x00\xda\xa1\x74\x81\xef\x29\x3d\x2b\x85\x44\xd9\x4a\x11\x10\xb1\x4e\x39\x58\xe8\xc9\xb1\xcb\xb5\x91\xaa\x98\xb2\x8d\xa8\xc2\xcc\x0c\x6b\xff\xa5\x7f\x88\x1a\xb9\xcf\xf9\xfb\xe9\x44\x20\xcc\x17\x70\x6a\x5f\xef\xa7\x13\x5b\x92\xf3\x98\x49\x58\x17\xaf\xca\xe5\xcc\x8a\xef\xd6\x38\x4f\xc5\xb6\x96\xa7\x13\xea\x1c\xa9\xdc\xbe\x5b\xb9\x83\x7e\x1e\xe5\xee\xdd\x8e\xf8\xfc\x9f\x87\x11\xff\x6e\x87\x42\x6e\xcf\xfd\x50\x78\x77\x63\xac\x5b\x8b\xc6\x58\x58\xab\x83\x76\x4e\x43\xdd\xbb\x1d\x4d\xb2\x75\x0e\x6d\x79\x8d\xd9\x78\xce\xe6\xb3\xe9\xe4\x61\x3a\x61\x52\xc1\xe5\x0c\x4a\x63\x51\x51\xa5\x58\xa2\x35\x99\xa6\xbc\x45\x49\x60\x2a\x7a\x53\x1a\x0a\x3c\xcb\xdf\xc2\x02\x4a\x43\x86\x38\x03\x85\xcc\x5a\x71\xde\x3e\xa3\xd7\x27\x0b\x10\xbc\x09\x36\x6c\x13\x5a\xc4\xef\xa4\x90\xe5\x4e\x9e\x24\xcb\x02\x9c\x5e\x22\x23\xf3\x0a\xcd\x46\x09\x10\xd8\xa5\x89\xe3\xc9\xdb\x79\xe2\xd8\x3d\x25\x8a\x7b\x1c\xcb\x14\x9a\x9c\xb1\x3a\x10\xe2\x34\x57\x32\x77\xf0\x9a\x01\x2a\x65\xdf\xef\x29\x3a\x54\xca\x46\xc7\xea\xe2\xb9\x52\x59\xfe\x8c\x04\x49\x7c\xc1\x43\xde\xcc\x80\xb5\xc6\x6a\x49\xc5\x32\x57\x1d\xf0\xc5\x9f\x73\xf8\xe2\xe6\x64\x66\xe7\xd3\x87\xb4\xd3\x73\x0a\x4d\x13\x6a\xa7\xb4\xe6\xfd\x30\xc7\x20\x4e\xa0\x5c\x62\xb2\x3f\x62\x25\xb3\x61\x1a\xd3\x88\x4f\x64\x62\xd0\xf3\x74\x80\x24\x5b\x39\x4b\x43\x5d\xd6\x06\xde\x3b\xef\x7c\x08\xe4\x76\x3a\x89\x94\xb6\x1b\x0d\x12\x3b\xea\xd9\xe1\xbc\xb3\x1b\xf8\xa2\x43\x8b\xd6\x4e\x79\xe4\x9c\xd6\xee\x31\xcb\x4e\x33\x12\xc5\x79\x8c\x39\xb2\xc1\x61\x31\xd0\x70\xbf\x1c\x3a\x8e\x48\xe3\x0d\x8a\x8c\xd5\x45\x27\xcd\xc9\x48\x60\x53\x71\x8d\x28\xa1\xe1\xc8\xaa\xe2\x1a\x51\xb2\x55\x72\x70\xa8\xe8\x02\x31\x4a\xf0\xf1\x92\x9d\x15\xc9\xb6\x2b\x52\xb3\x63\x2a\x52\x33\xca\x10\x58\x1c\x4e\xd3\x96\x6b\x6d\xdb\x34\xed\x2c\xdc\x4e\xb2\x8e\x84\xe4\x3d\x99\x59\x5b\x76\x89\x3c\xda\xb6\x47\xbb\xf9\x02\xe8\x4c\x67\x41\xb5\x67\xbd\xfc\x99\x93\x3f\x59\xc0\x57\xc1\x4f\x3a\x03\x2e\xe0\xd4\x0e\xd0\x64\xbb\x17\xba\x83\xb8\x3f\x1a\x00\x9d\x34\xa0\x2a\x05\x5c\x21\xd0\x45\x15\xd6\x60\x24\xe9\x2c\x51\xa0\x2a\xa9\x78\xed\xcc\x1f\xa5\x02\xbc\x2d\xdb\x75\x83\x33\x10\xd2\x40\x09\xb6\xa6\x89\x6d\x37\xfc\x1a\xc1\xf0\x16\x8b\x0b\xf9\xbe\x20\x2f\x2f\x67\xa1\x70\xed\xe6\x53\xfc\x52\x2a\xbd\x2a\x9b\xac\x4b\x4a\x5f\xc8\x09\x42\x9a\x15\xbd\xe3\xd2\x22\x49\xe1\xb4\x17\x69\x36\xb3\x73\xba\x86\xe4\xf6\xe3\xed\x86\xe4\x2e\x10\xa8\x21\xb9\xc7\xb1\x86\x44\x93\x33\x5e\xdf\xda\x53\x72\x8d\xb7\xfd\xdd\xcb\x99\xbe\x8f\x6b\x9f\x92\xc0\x7a\x4b\xbb\xb8\xcf\x25\x5e\xdf\x12\x45\xa6\xf2\x76\x1b\xf6\x3c\x0e\xb8\xf7\x61\xe1\xdb\x91\xae\xec\xd3\x6a\xb2\x23\xbd\x5a\x7a\xf0\x91\x7a\x0c\xfd\x15\x9a\xfb\x5a\xf4\xa5\x92\x2b\xb9\x98\xf3\xf6\x49\x42\x09\xff\x7d\xf9\xeb\x85\x9d\x4c\x34\xc7\x7f\xe8\x1a\xdd\x87\x26\x15\x6b\xc0\x4f\x96\x57\xef\xb0\x32\xfe\x1f\x8f\x50\x6f\xd1\x4c\x87\xb5\x2d\x7b\xf2\x2b\xe5\x90\x5d\xc1\x9b\xb7\x57\x77\xc6\x35\xd7\xa4\x7b\x6b\x6a\xb0\x6e\xee\x3d\x55\xa0\x60\x7c\x39\x0f\xd7\x4f\xee\x35\xcb\xd3\x0d\x9e\x0b\x77\xd1\x9a\xf9\xeb\x51\x62\x00\xbf\x32\xbf\x72\x9e\xfb\x72\x9b\x85\x6a\xf0\x49\xa6\x0b\xfb\xcd\xe9\xde\x28\xa8\x1e\xbd\x51\xf8\xa0\xe2\x4e\xa1\x87\x1b\xc5\x70\x19\xf7\x45\x3f\xff\x3a\x8e\xfd\xc5\xb5\x4a\x86\x94\x54\x61\xa1\xe8\xc8\xe7\x58\xcb\x77\x3b\x4c\xe9\x87\xa5\xa5\x54\x88\x2e\x99\x6d\x47\x5b\xaf\x51\xd4\x99\x17\xcc\x3a\xaa\x97\x54\x49\x96\xe7\x1e\x26\x7f\xed\x99\x06\xe0\x6f\x49\x1f\x33\x04\x5b\xba\x31\x08\xef\x83\x0f\x23\xdc\xd1\x26\x81\x9c\x07\x27\xd3\xd2\x1f\x8d\x66\xf0\xd1\xe9\xfe\xf6\xf1\x73\xcb\x5d\xfc\x7e\xfe\x75\xfc\xc4\x5e\x33\xd6\xb9\xef\x2c\xaf\x45\xdb\xeb\x2d\xae\x41\x68\xb7\x0d\xf0\x1b\x14\x70\xb5\x61\x0c\x15\x50\x4b\xf1\xdd\x35\xdc\x21\x53\x9b\x18\x58\xc8\xae\x36\xcc\xf7\x04\x4b\xeb\x9c\x70\xb6\xab\x33\xf4\x60\x20\x0f\xa3\x39\x6b\x68\x06\x7a\x3f\x10\xa8\x54\x9a\x10\xac\x4b\x07\xed\xbb\x2f\x4d\x49\xb8\x64\xe1\x37\x40\x3d\xc2\x27\xb7\x4d\x5b\xdb\xc9\xf6\x93\xee\x3e\xb1\xeb\xd0\x93\xf6\xd7\xd4\x46\x7a\x74\xfc\xb1\x29\x6d\x97\x1e\xb0\x4c\x83\x87\x25\x87\x61\xeb\x1a\xf6\x57\x82\xcd\xfa\x46\xd6\x7b\xf5\xd5\xeb\x78\x7b\xaa\x2b\x85\x88\xcf\xa0\x4d\x4a\xc6\xb9\x4c\x27\x85\xb2\xf5\xcc\x62\xbc\x07\xb7\xb7\xb1\xff\x4e\x27\x13\x7f\xfa\x4c\xbd\xf1\x8d\xb1\xbd\xcd\x3b\xb8\x47\x90\xed\xd3\x1f\xbb\x7a\xcc\x5b\x91\x64\xad\xf5\x97\x1c\x7e\xd7\xfb\xa6\xac\xfb\xa2\x13\x4b\x05\xfc\xfa\xdd\xd9\xa2\x5f\xcd\x56\x6d\xc4\x95\x0f\xf5\x85\x9c\xb1\x14\x25\x5e\x31\x2e\xe0\x34\x3c\x3b\x8b\xd4\x4e\x3c\x23\x78\x37\x23\x91\xff\x51\x84\x84\x46\xb9\xbd\x7e\x92\xfc\xe2\x31\x07\x3e\xeb\x8c\x87\x64\x4d\xda\x95\x27\x0f\xa0\x59\x00\x64\xd7\x26\xf1\xb9\x41\xdf\xb5\x39\x7c\xd4\xee\x40\x56\xf7\xed\x0f\x8f\xe0\xfd\xce\x7d\xe1\x53\x36\x06\x5a\xc0\xfd\x5e\x97\x86\xe1\x36\x87\xcf\x9e\xf7\x9d\xff\xb4\x64\xf0\xde\xfd\x94\x98\xf8\xfe\x93\x73\xe8\x33\xe6\x63\x3e\xec\x7a\xfd\x96\xe7\x13\xd5\xf5\x3c\x77\x56\xf9\x88\x9e\xd7\xe3\x51\x3b\x9b\xde\xee\x3e\xf3\xc1\x6d\x6f\xbc\x8b\x1c\xd7\x44\x76\x7f\xd6\xb8\x47\xec\x6c\x0f\x01\x5b\xd2\x39\x54\xe5\x5b\x98\x8f\x62\x97\xd2\x91\x9d\xd0\xed\x4a\xd4\x0f\x04\x6e\x2c\x0d\x8f\xcd\xc2\x98\x84\x2e\xb1\x62\x02\xb2\xb2\x71\x97\x71\x0f\x47\x87\xdc\xa3\x46\x3b\x63\xf6\x3f\x8f\xa7\x41\xf7\x39\xd5\x11\x51\xeb\xc2\xff\xfe\xbe\x00\x67\xce\xeb\x8e\xbb\xc9\xc0\xdd\x5b\xe5\xd0\xb1\x8a\xce\x1f\xce\xe0\x49\x3c\xd8\xc2\xdf\x7f\xdb\xb7\x73\xc1\x64\x71\xb1\x69\x51\xf1\x2a\xcb\x07\x7c\x86\x3c\x10\x33\x90\xd7\x8e\xaa\xa4\x67\xe2\x22\x63\x8d\x2c\xcd\xb7\xdf\xb8\x28\x9e\xc8\xeb\x74\x72\xda\x5f\x36\x02\x6f\xd7\x58\x19\xac\x07\x87\x7d\xba\x67\x88\x57\x0c\x73\x77\xc7\x90\x5e\x31\xe8\xf7\xdc\x54\x2b\x30\x6e\x75\x72\xd5\xee\xff\xcf\xec\x4a\x55\xa9\x11\x0c\xfc\x67\x01\xe9\xcf\xd9\xe6\x9f\x70\x7a\x0a\x06\xfe\x3d\x10\x7f\xfb\xcd\xdc\x76\xb2\xe1\xa9\xde\x5d\x5c\x88\x7c\xdc\xdc\x6b\x3e\x6e\xef\x35\xdf\x69\x70\xd3\x59\x1c\x6b\x58\x5d\xc7\x80\xf7\xaa\x5c\xeb\xf4\x7f\x40\x78\x79\x29\x6a\xc7\x83\x82\xa0\x45\xb3\x92\x35\xbc\xe7\x66\x05\x0a\x2b\x79\xe3\xc8\x2f\x0a\xbd\x51\x08\x42\xc2\xba\x14\xbc\xd2\xc0\x05\x78\xa6\xca\xc5\xd2\xb7\xb9\xa4\x43\xb1\x3a\xf9\xcd\x17\xbc\x30\x87\x37\x6f\xbb\xff\xa8\xf0\x90\x43\xe6\x9b\x51\x22\x1e\x9e\xa4\x6b\xb4\xf4\xdb\x9a\xf7\xf9\xc2\x19\xdc\x50\x5d\x3a\xe7\x2c\x8f\xbd\xe9\x35\x27\xba\x5c\xe9\xa5\xc4\x17\xaf\x42\x74\xce\xf9\x78\x31\x3a\x83\x1b\xa2\x38\x2c\x34\x26\xca\x42\xea\xff\x96\xe9\x85\xec\xaa\x8b\x10\xc0\x6c\x80\xae\x23\x04\x5b\xe0\x3a\xf1\xa7\x42\x99\x9e\x81\x53\x34\x9d\x3c\x80\x49\x3f\x33\x58\x2c\x1d\x53\xe9\x84\x8f\x81\x64\x2f\xbe\x1e\x98\x0e\x48\xf4\x04\x69\x14\xc7\x74\xf2\x36\x94\x81\x99\x6c\x81\x19\x06\x3e\x15\xce\xfe\x89\x3c\x05\x34\x8c\x04\x48\xdd\xdd\x97\xc5\x94\xc7\xff\xeb\x14\xe5\x8f\x08\x6b\x88\x74\x04\x58\x1e\x79\xdb\x3e\x68\x63\x20\x43\x70\xdd\x49\x6d\x0b\x5a\x27\xfe\x54\x60\xf7\x9d\xe0\x32\x47\xf7\x1c\x7e\xbf\x74\xa7\xb8\x47\xc1\xcf\x85\x33\x82\x9e\x73\x62\x3f\x76\x2e\x8a\x2d\xe4\xdc\x66\xbf\x85\x9c\x13\x7f\x2a\x72\x3d\x2e\x93\x24\xa4\x93\x87\x74\xb4\x6f\x94\x8d\x8e\x84\x74\xc2\x47\x84\xd2\xc5\x37\x02\xe5\xca\x93\x9f\x7d\x50\x7a\xf7\x87\x50\x7a\x6a\xb1\x85\xa5\x97\x7f\x2a\x98\x7b\x59\x52\xe6\xe9\x8c\x15\xbf\x48\x88\xd2\xa3\x80\xe7\x03\x1a\x41\x6f\x1d\xd8\xd5\x3e\xf8\x7c\x20\x1d\x7e\x14\x62\xbc\x9b\x30\x90\xde\x4e\xe4\xbd\x37\x3a\x36\x48\x05\xa6\xf8\x99\x8b\x3a\xcb\x61\xb1\x88\xe3\x2f\x0c\xd1\xb2\x89\x81\x05\x98\xe2\x79\x83\x6d\xd6\xe3\x0d\x66\xfa\x30\xfd\x7f\x00\x00\x00\xff\xff\x1a\x75\x89\x02\x8f\x2c\x00\x00")

func schemaGoBytes() ([]byte, error) {
	return bindataRead(
		_schemaGo,
		"schema.go",
	)
}

func schemaGo() (*asset, error) {
	bytes, err := schemaGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.go", size: 11407, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/main.tmpl": templateMainTmpl,
	"schema.go":          schemaGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.go": &bintree{schemaGo, map[string]*bintree{}},
	"template": &bintree{nil, map[string]*bintree{
		"main.tmpl": &bintree{templateMainTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
